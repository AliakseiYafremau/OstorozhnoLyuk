import os

from aiogram.client.session import aiohttp
from aiohttp import ClientSession
from aiogram import Router, F, html, types, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from inline_kbs import ease_link_kb, kb2, kb1, fin, link_kb0, f_s, kbg

start_router = Router()


class SaveStatus(StatesGroup):  # —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()
    Q6 = State()
    Q7 = State()
    Q8 = State()


# –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –±–æ—Ç–æ–º
@start_router.message(CommandStart())  # —Å—Ç–∞—Ä—Ç, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def cmd_start(message: Message, state: FSMContext):
    """
    This handler receives messages with `/start` command
    """
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.bold(message.from_user.full_name)}!\n"
                         f"–Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ª—é–∫–æ–≤", reply_markup=ease_link_kb())


@start_router.callback_query(F.data == 'contact')  # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç—ã
async def send_contact(call: CallbackQuery):
    cont = (
        "üë§ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –ª—é–∫!'\n"
        "üè† <b>–ê–¥—Ä–µ—Å:</b> '–†–æ—Å—Å–∏—è'\n"
        "üìß <b>Email:</b> 'email'\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> 'phone_number'\n"
        "üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> '–õ–∏–∑–∞ –ê–ª–µ—Ä—Ç'\n"
        "<b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:</b> vk.com/ostorozhnolyuk \n"
        "<b>Instagram:</b> @ostorozhnolyuk \n"
        "<b>Facebook:</b> www.facebook.com/–û—Å—Ç–æ—Ä–æ–∂–Ω–æ–ª—é–∫-111280130477743 \n"
        "<b>–• (–¢–≤–∏—Ç—Ç–µ—Ä):</b> @ostorozhnolyuk \n"
    )

    await call.message.edit_text(cont, reply_markup=ease_link_kb())
    await call.answer()


@start_router.callback_query(F.data == 'about')  # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û –ø—Ä–æ–µ–∫—Ç–µ"
async def send_about_project(call: CallbackQuery):
    about_pr = (
        "üè† –∑–¥–µ—Å—å\n"
        "–±—É–¥–µ—Ç\n"
        "–æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "–ø—Ä–æ–µ–∫—Ç–∞\n"
    )
    await call.message.edit_text(about_pr, reply_markup=ease_link_kb())
    await call.answer()


@start_router.callback_query(F.data == 'stop_survey')  # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
async def stop_survey(call: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MemoryStorage
    await state.clear()  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer("–û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ease_link_kb())
    await call.answer()


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏
@start_router.callback_query(F.data == 'application')  # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def send_photo(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª—é–∫–∞ –≤–±–ª–∏–∑–∏ 1 —à—Ç.\n"
                              "–§–æ—Ç–æ –ª—é–∫–∞ —Å –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è–º–∏ 2 —à—Ç. \n"
                              "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ –æ–¥–Ω–æ–π.")
    await call.answer()
    await state.set_state(SaveStatus.Q1)


@start_router.message(SaveStatus.Q1)
async def handle_photo(message: types.Message, bot: Bot, state: FSMContext):
    data = await state.get_data()

    photos = data.get('photos', [])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

    file_id = photo.file_id
    file = await message.bot.get_file(file_id)
    file_path = os.path.join('photos', f"{file_id}.jpg")

    await message.bot.download_file(file.file_path, file_path)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    photos.append(file_path)

    await state.update_data(photos=photos)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    if len(photos) < 3:
        await message.delete()
        media_group = []
        for photo in photos:
            media_group.append(InputMediaPhoto(media=photo))
        
        await bot.send_media_group(chat_id=message.chat.id,
                                media=media_group)
    else:
        # –ï—Å–ª–∏ —Ç—Ä–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∫–ª—é—á–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è", reply_markup=kbg())


@start_router.callback_query(F.data == 'kb_geo')  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
async def send_geo(call: types.CallbackQuery,  state: FSMContext):
    button_geo = [[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard=button_geo, resize_keyboard=True)  # —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É
    await call.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É", reply_markup=reply_markup)
    await call.answer()
    await state.set_state(SaveStatus.Q2)


@start_router.message(F.content_type == types.ContentType.LOCATION, SaveStatus.Q2)  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
async def location_handler(message: types.Message, state: FSMContext):
    await state.update_data(location=message.location)
    await message.answer(text="–°–ø–∞—Å–∏–±–æ!", reply_markup=types.ReplyKeyboardRemove())  # —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É
    await message.answer(text="–í –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ?", reply_markup=link_kb0())
    await state.set_state(SaveStatus.Q3)  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞


@start_router.message(SaveStatus.Q3)
async def send_address(message: types.Message, state: FSMContext):
    user_city = message.text.lower()  # –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(city=user_city)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer(text="–ê–¥—Ä–µ—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–¥–∞–Ω–∏—è", reply_markup=link_kb0())
    await state.set_state(SaveStatus.Q4)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É


@start_router.message(SaveStatus.Q4)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω–ª–∏–Ω –∫–Ω–æ–ø–∫—É –≤ –æ–±—ã—á–Ω—É—é
async def send_geo(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text.lower())  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer(text='–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', reply_markup=kb1())
    await state.set_state(SaveStatus.Q5)


@start_router.callback_query(F.data == 'Q5')  # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def send_description(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: whatsapp, telegramm, email, phone  (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                                        reply_markup=kb2())
    await callback_query.answer()
    await state.set_state(SaveStatus.Q6)


@start_router.message(SaveStatus.Q5)  # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_contacts(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.lower())
    await message.answer(text="–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: whatsapp, telegramm, email, phone (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", reply_markup=kb2())
    await state.set_state(SaveStatus.Q6)


@start_router.message(SaveStatus.Q6)  # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_end(message: types.Message, state: FSMContext):
    await state.update_data(contacts=message.text.lower())
    await message.answer(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", reply_markup=fin())
    await state.set_state(SaveStatus.Q7)


@start_router.callback_query(F.data == 'Q6')
async def send_description(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", reply_markup=fin())
    await callback_query.answer()
    await state.set_state(SaveStatus.Q7)


@start_router.callback_query(F.data == 'Q7')
async def end(call: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()
    user = {call.from_user.id: {key: (
        value if not isinstance(value, types.Location) else {"latitude": value.latitude, "longitude": value.longitude})
                                for key, value in data.items()}}
    text = [f'{key}: {value}\n' for key, value in data.items()]

    await call.message.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=f_s())  # —Å–ø—Ä–æ—Å–∏—Ç—å —É –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å

    # –°–æ–∑–¥–∞–µ–º multipart/form-data

    async with ClientSession() as session:
        form_data = aiohttp.FormData()
        for key, value in user[call.from_user.id].items():
            if isinstance(value, dict):
                form_data.add_field(key + '[latitude]', value['latitude'])
                form_data.add_field(key + '[longitude]', value['longitude'])
            else:
                form_data.add_field(key, value)

        async with session.post('YOUR_ENDPOINT_URL', data=form_data) as response:   # –Ω–µ –∑–∞–±—ã—Ç—å –≤–ø–∏—Å–∞—Ç—å –∞–¥—Ä–µ—Å
            if response.status == 200:
                await call.message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")
            else:
                await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")

    await state.clear()
    await call.answer()

  # multipart/form-data –∑–∞–ø—Ä–æ—Å